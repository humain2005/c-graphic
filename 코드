코드1
#include <SFML/Graphics.hpp>
#include <cmath>
sf::Color HSVtoRGB(float H, float S, float V, sf::Uint8 A = 255) {
    float C = V * S;
    float X = C * (1 - fabs(fmod(H / 60.f, 2) - 1));
    float m = V - C;
    float r, g, b;
    if (H < 60)       { r = C; g = X; b = 0; }
    else if (H < 120) { r = X; g = C; b = 0; }
    else if (H < 180) { r = 0; g = C; b = X; }
    else if (H < 240) { r = 0; g = X; b = C; }
    else if (H < 300) { r = X; g = 0; b = C; }
    else              { r = C; g = 0; b = X; }
    return sf::Color((r + m) * 255, (g + m) * 255, (b + m) * 255, A);
}
int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Follow Mouse & Rainbow Color");

    sf::Texture texture;
    if (!texture.loadFromFile("block.jpg"))
        return -1;
    sf::Sprite sprite(texture);
    sf::Vector2u size = texture.getSize();
    sprite.setOrigin(size.x / 2.f, size.y / 2.f);
    sf::Vector2f position(window.getSize().x / 2.f, window.getSize().y / 2.f);
    sprite.setPosition(position);
    sf::Clock clock;
    float speed = 0.005f;
    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        sf::Vector2f mousePos = static_cast<sf::Vector2f>(sf::Mouse::getPosition(window));
        position += (mousePos - position) * speed;
        sprite.setPosition(position);
        float hue = fmod(clock.getElapsedTime().asSeconds() * 60.f, 360.f);
        sf::Color color = HSVtoRGB(hue, 1.f, 1.f);
        sprite.setColor(color);
        window.clear(sf::Color::Black);
        window.draw(sprite);
        window.display();
    }
    return 0;
}
코드2
#include <SFML/Graphics.hpp>
#include <time.h>
#include <iostream>

const int M = 20;  
const int N = 10; 
const int blockSize = 36;

int field[M][N] = { 0 };

int figures[7][4] = {
    1,3,5,7,  // I
    2,4,5,7,  // Z
    3,5,4,6,  // S
    3,5,4,7,  // T
    2,3,5,7,  // L
    3,5,7,6,  // J
    2,3,4,5   // O
};

struct Point { int x, y; } a[4], b[4];

bool check() {
    for (int i = 0; i < 4; i++) {
        if (a[i].x < 0 || a[i].x >= N || a[i].y >= M) return false;
        if (field[a[i].y][a[i].x]) return false;
    }
    return true;
}

int main() {
    srand(time(0));

    sf::RenderWindow window(sf::VideoMode(N * blockSize, M * blockSize), "Tetris with Image Puzzle");
    window.setFramerateLimit(60);

    sf::Texture texture;
    if (!texture.loadFromFile("block.jpg")) {
        std::cout << "block.jpg 파일을 실행 폴더에 넣어주세요." << std::endl;
        return -1;
    }

    sf::Sprite block(texture);
    int texWidth = texture.getSize().x;
    int texHeight = texture.getSize().y;

    float scaleX = (float)(N * blockSize) / texWidth;
    float scaleY = (float)(M * blockSize) / texHeight;
    block.setScale(scaleX, scaleY);

    int texBlockWidth = texWidth / N;
    int texBlockHeight = texHeight / M;

    bool isPuzzleMode = true; 
    bool hardDrop = false;
    int dx = 0;
    bool rotate = false;
    float timer = 0, delay = 0.5f;
    sf::Clock clock;
    int n = rand() % 7;
    for (int i = 0; i < 4; i++) {
        a[i].x = figures[n][i] % 2 + N / 2 - 1;
        a[i].y = figures[n][i] / 2;
    }
    while (window.isOpen()) {
        float time = clock.restart().asSeconds();
        timer += time;
        sf::Event e;
        while (window.pollEvent(e)) {
            if (e.type == sf::Event::Closed)
                window.close();
            if (e.type == sf::Event::KeyPressed) {
                if (e.key.code == sf::Keyboard::Num1) isPuzzleMode = true;
                else if (e.key.code == sf::Keyboard::Num2) isPuzzleMode = false;
                else if (e.key.code == sf::Keyboard::Up) rotate = true;
                else if (e.key.code == sf::Keyboard::Left) dx = -1;
                else if (e.key.code == sf::Keyboard::Right) dx = 1;
                else if (e.key.code == sf::Keyboard::Down) delay = 0.05f;
                else if (e.key.code == sf::Keyboard::Space) {
                    if (isPuzzleMode) {
                        for (int i = M - 1; i > 0; i--)
                            for (int j = 0; j < N; j++)
                                field[i][j] = field[i - 1][j];
                        for (int j = 0; j < N; j++) field[0][j] = 0;
                    }
                    else {
                        hardDrop = true;
                    }
                }
                else if (e.key.code == sf::Keyboard::LShift || e.key.code == sf::Keyboard::RShift) {
                    int newShape = rand() % 7;
                    for (int i = 0; i < 4; i++) {
                        a[i].x = figures[newShape][i] % 2 + N / 2 - 1;
                        a[i].y = figures[newShape][i] / 2;
                    }
                    if (!check()) for (int i = 0; i < 4; i++) a[i] = b[i];
                    else n = newShape;
                }
            }
        }
        for (int i = 0; i < 4; i++) { b[i] = a[i]; a[i].x += dx; }
        if (!check()) for (int i = 0; i < 4; i++) a[i] = b[i];
        dx = 0;
        if (rotate) {
            Point p = a[1];
            for (int i = 0; i < 4; i++) {
                int x = a[i].y - p.y;
                int y = a[i].x - p.x;
                a[i].x = p.x - x;
                a[i].y = p.y + y;
            }
            if (!check()) for (int i = 0; i < 4; i++) a[i] = b[i];
        }
        rotate = false;
        if (timer > delay || hardDrop) {
            do {
                for (int i = 0; i < 4; i++) { b[i] = a[i]; a[i].y += 1; }
            } while (hardDrop && check());
            if (!check()) {
                for (int i = 0; i < 4; i++) field[b[i].y][b[i].x] = 1;
                n = rand() % 7;
                for (int i = 0; i < 4; i++) {
                    a[i].x = figures[n][i] % 2 + N / 2 - 1;
                    a[i].y = figures[n][i] / 2;
                }
                if (!isPuzzleMode) {
                    for (int i = M - 1; i >= 0; i--) {
                        int count = 0;
                        for (int j = 0; j < N; j++) {
                            if (field[i][j]) count++;
                        }
                        if (count == N) {
                            for (int k = i; k > 0; k--)
                                for (int j = 0; j < N; j++)
                                    field[k][j] = field[k - 1][j];
                            for (int j = 0; j < N; j++)
                                field[0][j] = 0;
                            i++;
                        }
                    }
                }
            }
            timer = 0;
            hardDrop = false;
            delay = 0.5f;
        }
        window.clear(sf::Color::Black);
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                if (field[i][j] == 0) continue;
                block.setTextureRect(sf::IntRect(j * texBlockWidth, i * texBlockHeight, texBlockWidth, texBlockHeight));
                block.setPosition(j * blockSize, i * blockSize);
                window.draw(block);
            }
        }
        for (int i = 0; i < 4; i++) {
            block.setTextureRect(sf::IntRect(a[i].x * texBlockWidth, a[i].y * texBlockHeight, texBlockWidth, texBlockHeight));
            block.setPosition(a[i].x * blockSize, a[i].y * blockSize);
            window.draw(block);
        }
        window.display();
    }
    return 0;
}
